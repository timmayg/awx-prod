---
- hosts: localhost
  tasks:


#
# These are some other facts that may or may not work. 
#

    #
    # 01 Tasks will create a string that looks like a date time
    #       and then convert it to a datetime object
    #
    - name: 01a - Stamp a string that looks like date time into a Fact
      ansible.builtin.set_fact:
        new_years25: '{{ ("2025-01-01 00:00:00") }}'
#        new_years25: '{{ ("2025-01-00") }}'


    - name: 01b - Print the string based Time Fact
      ansible.builtin.debug:
        msg: "The fact is {{ new_years25 }}"

    - name: 01c - Review the class type of the fact
      ansible.builtin.debug:
        var: new_years25.__class__.__name__

    - name: 01d - Convert the string Time Fact to a datetime object
      # This task does not appear to do anything.
      ansible.builtin.set_fact:
        new_years25_obj: '{{ new_years25 | to_datetime }}'

    - name: 01e - Print the new fact
      ansible.builtin.debug:
        msg: "The fact is {{ new_years25_obj }}"

    - name: 01f - Review the class type of the fact
      ansible.builtin.debug:
        var: new_years25_obj.__class__.__name__

################################################################################
################################################################################ 
# 
# 02 Tasks will create a dictionary that looks like a date time
#
    - name: 02a - Obtain the Current Date Time as a Function
      ansible.builtin.set_fact:
        current_date: "{{ ansible_date_time }}"

    - name: 02b - Print the dictionary based Time Fact
      ansible.builtin.debug:
        msg: "The fact is {{ current_date }}"

    - name: 02c - Review the fact that was set
      ansible.builtin.debug:
        var: current_date.__class__.__name__
# 
#  Lets play with the dictionary object that was created
# 
    - name: 02d - Obtain the Current Date Time as a Function
      ansible.builtin.set_fact:
        current_date_obj: "{{ ansible_date_time.date }}"

    - name: 02e - Print the dictionary based Time Fact
      ansible.builtin.debug:
        msg: "The fact is {{ current_date_obj }}"

    - name: 02f - Review the fact that was set
      ansible.builtin.debug:
        var: current_date_obj.__class__.__name__













#
# These are some other facts that may or may not work. 
#

################################################################################
################################################################################


    - name: 01 - Get total amount of seconds between two dates
      # this works
      set_fact:
        secsdiff: '{{ (("2024-08-13 16:00:00" | to_datetime) - ("2024-08-12" | to_datetime("%Y-%m-%d"))).total_seconds() }}'

    - name: 01a - Print total seconds difference
      debug:
        msg: "Total seconds between the two dates is {{ secsdiff }}"

################################################################################
################################################################################



################################################################################
################################################################################

# these tasks work
    - name: 03a - Get the number of seconds between two date times
      set_fact:
        remaining_secs: '{{ (("2024-08-13 20:00:30" | to_datetime) - ("2024-08-13 20:00:00" | to_datetime)).seconds }}'

    - name: 03b - Print remaining seconds
      debug:
        msg: "Remaining seconds after delta is {{ remaining_secs }}"

    - name: 03c - Review the fact that was set
      debug:
        var: remaining_secs.__class__.__name__


################################################################################
################################################################################


################################################################################
################################################################################

#  this works
#  this does not account for 1/2 days etc. its integer only
    - name: 01a - Get amount of days between two dates
      set_fact:
        daydiff: '{{ (("2024-08-11 13:00:00" | to_datetime) - ("2024-08-12" | to_datetime("%Y-%m-%d"))).days }}'

    - name: 01b - Print days difference
      debug:
        msg: "Number of days between the two dates is {{ daydiff }}"

    - name: 01c - Review the fact that was set
      debug:
        var: daydiff.__class__.__name__

################################################################################
################################################################################





############################

     - name: 02 - add 7 days to the current date
       ansible.builtin.set_fact:
          new_date: "{{ (current_date.date) + timedelta(days=7) | string }}"

the above task failed with this error. 
TASK [02 - add 7 days to the current date] ************************************* fatal: 
[localhost]: FAILED! => 
{"msg": "The task includes an option with an undefined variable. 
         The error was: 'timedelta' is undefined. 'timedelta' is 
         undefined\n\nThe error appears to be in '/runner/project/000-time-testing.yaml': line 19,
          column 8, but may\nbe elsewhere in the file depending on 
          the exact syntax problem.\n\nThe offending line 
          appears to be:\n\n\n - name: 02 - add 7 days to the current date\n ^ here\n"}
############################


# CodeGPT wanted this to be current_date.iso8601, I removed the .iso8601
     - name: 07 - Pipe ansible fact to to_datetime
       ansible.builtin.set_fact:
          current_date_datetime: "{{ current_date | to_datetime }}"

   - name: 07a - Debug current_date_datetime
     ansible.builtin.debug:
       msg:
         - "ans_fact_date is of type {{ current_date_datetime.__class__.__name__ }}"
         - >
           "current_date_datetime value is {{ current_date_datetime }}"





      - name: Add 60 days to the current date
        set_fact:
           new_date: "{{ (current_date) + timedelta(days=60) | string }}"

     - name: Display the date 60 days later
        debug:
          msg: "Date 60 days later: {{ new_date }}"



#  This task is failing... 
# "msg": "the field 'args' has an invalid value ({'date_datetime': '{{ ansible_date_time.iso8601 | to_datetime }}'}), and could not be converted to an dict.The error was: time data '2024-08-13T11:27:27Z' does not match format '%Y-%m-%d %H:%M:%S'\n\nThe error appears to be in '/runner/project/000-time-testing.yaml': line 27, column 8, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n     - name: 06 - Pipe native function to to_datetime\n       ^ here\n",

     - name: 06 - Pipe native function to to_datetime
       ansible.builtin.set_fact:
          date_datetime: "{{ ansible_date_time.iso8601 | to_datetime }}"






     - name: 02 - Create a new time fact based off of 
       ansible.builtin.set_fact:
          iso8601: "{{ ansible_date_time.iso8601 }}"

     - name: 02a - Debug current_date
       ansible.builtin.debug:
          msg:
             - "The newly calculated date is type {{ iso8601.__class__.__name__ }}"
             - "The newly calculated date is {{ iso8601 }}"

     - name: 02 - Debug current_date
       ansible.builtin.debug:
          msg:
             - "current_date is of type {{ current_date.__class__.__name__ }}"
             - "current_date value is {{ current_date }}"

     - name: 03 - Display the current timezone
       ansible.builtin.debug:
          msg: "Current timezone: {{ current_date.tz }}"



# This errors
# "msg": "the field 'args' has an invalid value ({'date_before': '{{ ansible_date_time.iso8601 | to_datetime }}'}), and could not be converted to an dict.The error was: time data '2024-08-12T01:45:58Z' does not match format '%Y-%m-%d %H:%M:%S'\n\nThe error appears to be in '/runner/project/000-time-testing.yaml': line 17, column 8, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n     - name: 02 - Calculate date 30 days before current date\n       ^ here\n",
     - name: 02 - Calculate date 30 days before current date
       ansible.builtin.set_fact:
          date_before: "{{ ansible_date_time.iso8601 | to_datetim }}"

# This works
     - name: 02 - Get basic ansible_date_time
       ansible.builtin.set_fact:
          date_before: "{{ ansible_date_time }}"





     - name: 02 - Calculate date 30 days before current date
       ansible.builtin.set_fact:
          date_30_days_before: "{{ (ansible_date_time.iso8601 | to_datetime) - timedelta(days=30) | string }}"

     - name: 02a - Debug date_30_days_before
       ansible.builtin.debug:
          msg:
             - "date_30_days_before is of type {{ date_30_days_before.__class__.__name__ }}"
             - "date_30_days_before value is {{ date_30_days_before }}"

     - name: Timmay HARD STOP this Playbook
       ansible.builtin.meta: end_play
       when: 1 == 1





      - debug: var=ansible_date_time

      - debug: msg="the current date is {{ ansible_date_time.date }}"

      - name: Timmay HARD STOP this Playbook
        ansible.builtin.meta: end_play
        when: 1 == 1

